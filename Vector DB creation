{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1KViY3-2lO1Y3XulSGNhMph94D033d0lu","timestamp":1700935847403},{"file_id":"1Aubv4ir5N3StVWdILhaA7wU6HEjvz71M","timestamp":1700348985007}],"gpuType":"T4","machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"1ad364070ba24907be04b6baa2d3391f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d7e5f6ef0da4406c93f21d56e2602337","IPY_MODEL_a5f8a320357c452699dc7ebe74db9a53","IPY_MODEL_a686bc0860984f9f9ec59401841f12a9"],"layout":"IPY_MODEL_1d7c7497825144eb84cdb42f71db8844"}},"d7e5f6ef0da4406c93f21d56e2602337":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a61b809e55774c3795dc38834a07e09b","placeholder":"​","style":"IPY_MODEL_62dee596ebf34027859d93e32d610457","value":"Map: 100%"}},"a5f8a320357c452699dc7ebe74db9a53":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_9f4839be60d644818fbdb8b66c644a06","max":42204,"min":0,"orientation":"horizontal","style":"IPY_MODEL_bd58a5b159c445feafdf7bf27905df51","value":42204}},"a686bc0860984f9f9ec59401841f12a9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_55aefdf4f849436da46dd0873f749d9e","placeholder":"​","style":"IPY_MODEL_ceefbce987f3431f87fc09bcfd3769a3","value":" 42204/42204 [00:06&lt;00:00, 5680.69 examples/s]"}},"1d7c7497825144eb84cdb42f71db8844":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a61b809e55774c3795dc38834a07e09b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"62dee596ebf34027859d93e32d610457":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9f4839be60d644818fbdb8b66c644a06":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bd58a5b159c445feafdf7bf27905df51":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"55aefdf4f849436da46dd0873f749d9e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ceefbce987f3431f87fc09bcfd3769a3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1338c04658d547839c2b31c3116b6ab1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_8e0a0f40408d4ce9a9912652997778d3","IPY_MODEL_907f765108e14e0a93921f11a41c1793","IPY_MODEL_8b4b59e4ff044c61b1a9a344e00dcd4d"],"layout":"IPY_MODEL_b1bbff8145ee4b099402278db6123ef9"}},"8e0a0f40408d4ce9a9912652997778d3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a61dca60cec44aa49c4037034adeb012","placeholder":"​","style":"IPY_MODEL_03bcc127ee3845c6be175675b50d3554","value":"100%"}},"907f765108e14e0a93921f11a41c1793":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_09afb22074b94304bbfbeb092a075f38","max":423,"min":0,"orientation":"horizontal","style":"IPY_MODEL_4f50a03b9ae54ba393875a3b62c1bdd1","value":423}},"8b4b59e4ff044c61b1a9a344e00dcd4d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_881f75ddf27442e8bb772ead0b9b2ae3","placeholder":"​","style":"IPY_MODEL_aaeea495cb5944f6bca8ade7a6da140e","value":" 423/423 [12:10&lt;00:00,  1.30s/it]"}},"b1bbff8145ee4b099402278db6123ef9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a61dca60cec44aa49c4037034adeb012":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"03bcc127ee3845c6be175675b50d3554":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"09afb22074b94304bbfbeb092a075f38":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4f50a03b9ae54ba393875a3b62c1bdd1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"881f75ddf27442e8bb772ead0b9b2ae3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aaeea495cb5944f6bca8ade7a6da140e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","source":["!pip install -qU \\\n","    datasets==2.14.5 \\\n","    pinecone-client==2.2.4 \\\n","    cohere==4.27"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dUUgcpwYNZQy","executionInfo":{"status":"ok","timestamp":1701611188798,"user_tz":-60,"elapsed":9029,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"cefcf91b-4376-4cdc-f1c7-2c31535ce0d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/519.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m81.9/519.6 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m519.6/519.6 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m179.4/179.4 kB\u001b[0m \u001b[31m21.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.6/47.6 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m115.3/115.3 kB\u001b[0m \u001b[31m15.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m134.8/134.8 kB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m300.4/300.4 kB\u001b[0m \u001b[31m31.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.7/2.7 MB\u001b[0m \u001b[31m87.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","llmx 0.0.15a0 requires openai, which is not installed.\n","llmx 0.0.15a0 requires tiktoken, which is not installed.\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgUZantLL6LJ","executionInfo":{"status":"ok","timestamp":1701611213803,"user_tz":-60,"elapsed":25022,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"e7098499-d968-4749-d0ec-a59b06ba342e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","os.listdir()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aPNoGD13L_z6","executionInfo":{"status":"ok","timestamp":1701611213804,"user_tz":-60,"elapsed":27,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"2eb45d12-4e33-4335-bc4b-3a5db71f689f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['.config', 'drive', 'sample_data']"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["!python -m spacy download en_core_web_md"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xhrs65nGCocu","executionInfo":{"status":"ok","timestamp":1701611232105,"user_tz":-60,"elapsed":18318,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"f03ccbb4-c293-45a2-dbc4-c7affa896204"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2023-12-03 13:46:57.534462: E tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:9342] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2023-12-03 13:46:57.534518: E tensorflow/compiler/xla/stream_executor/cuda/cuda_fft.cc:609] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2023-12-03 13:46:57.534543: E tensorflow/compiler/xla/stream_executor/cuda/cuda_blas.cc:1518] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2023-12-03 13:46:57.542703: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 AVX512F FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2023-12-03 13:46:58.646352: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","2023-12-03 13:47:00.184004: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:894] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-12-03 13:47:00.184486: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:894] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","2023-12-03 13:47:00.184652: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:894] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero. See more at https://github.com/torvalds/linux/blob/v6.0/Documentation/ABI/testing/sysfs-bus-pci#L344-L355\n","Collecting en-core-web-md==3.6.0\n","  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.6.0/en_core_web_md-3.6.0-py3-none-any.whl (42.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.8/42.8 MB\u001b[0m \u001b[31m37.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: spacy<3.7.0,>=3.6.0 in /usr/local/lib/python3.10/dist-packages (from en-core-web-md==3.6.0) (3.6.1)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (1.0.10)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2.0.8)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (3.0.9)\n","Requirement already satisfied: thinc<8.2.0,>=8.1.8 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (8.1.12)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (1.1.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2.4.8)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2.0.10)\n","Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (0.9.0)\n","Requirement already satisfied: pathy>=0.10.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (0.10.3)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (6.4.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (4.66.1)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (1.23.5)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2.31.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (1.10.13)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (3.1.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (67.7.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (23.2)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (3.3.0)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (4.5.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2023.11.17)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.2.0,>=8.1.8->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.2.0,>=8.1.8->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (0.1.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (8.1.7)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy<3.7.0,>=3.6.0->en-core-web-md==3.6.0) (2.1.3)\n","Installing collected packages: en-core-web-md\n","Successfully installed en-core-web-md-3.6.0\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_md')\n"]}]},{"cell_type":"code","source":["import nltk\n","nltk.download('stopwords')\n","nltk.download('punkt')\n","from nltk.corpus import stopwords\n","import unicodedata\n","import string\n","from gensim.parsing.preprocessing import remove_stopwords\n","import spacy\n","nlp = spacy.load(\"en_core_web_md\")\n","tokenizer = nlp.tokenizer"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0I7cm77R8ZAo","executionInfo":{"status":"ok","timestamp":1701611900776,"user_tz":-60,"elapsed":1467,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"0561d117-a500-40b7-c15f-c233fcbab0d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"]}]},{"cell_type":"markdown","source":["### Data importing and cleaning"],"metadata":{"id":"FCObA-FSyhm3"}},{"cell_type":"code","source":["import pandas as pd\n","import re\n","import ast\n","import numpy as np\n","df = pd.read_csv('//content//drive//MyDrive//NLP Project//MovieSummaries//plot_summaries.txt',\n","                 sep=\"\t\", header = None)\n","df.columns = ['Wikipedia_movie_ID','summary']\n","meta_data = pd.read_csv('//content//drive//MyDrive//NLP Project//MovieSummaries//movie.metadata.tsv' ,\n","                        sep='\\t', header = None)\n","meta_data.columns = ['Wikipedia_movie_ID', 'Freebase_movie_ID', 'movie_name',\n","                     'relase_date','box_office_revenue','language','countries','country', 'genres']\n","# join meta_data and df on Wikipedia_movie_ID\n","df = pd.merge(df, meta_data[['Wikipedia_movie_ID','relase_date', 'movie_name', 'genres']],\n","              on = 'Wikipedia_movie_ID')\n","actors_info =  pd.read_csv('//content//drive//MyDrive//NLP Project//MovieSummaries//character.metadata.tsv' ,\n","                           sep='\\t', header = None)\n","actors_info.columns = [\"Wikipedia_movie_ID\", \"Freebase Movie ID\",\"Release Date\",\n","                       \"Character Name\", \"Actor DOB\", \"Actor gender\", \"Actor height\",\n","                       \"Actor ethnicity\", \"Actor Name\", \"Actor age at movie release\", \"Freebase character map\",\n","                       \"Temp1\", \"Temp2\"]\n","df = pd.merge(df, # join with the list of the actor names of the movie\n","         actors_info.groupby('Wikipedia_movie_ID')['Actor Name'].agg(list).reset_index()\n","          , how='left', on='Wikipedia_movie_ID')"],"metadata":{"id":"kRMi4pMoL0Ca"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# extract genres\n","def extract_genres(genres):\n","    genres = list(ast.literal_eval(genres).values())\n","    genres = [re.split('/|&', genre) for genre in genres]\n","    flattened_genres = [item.strip() for sublist in genres for item in sublist]\n","    return list(set(flattened_genres))\n","\n","df['genres'] = df['genres'].apply(extract_genres)"],"metadata":{"id":"GIgVLfly6Poc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def expand_summary(summary, movie_name, genres, actors_names):\n","    str_genres = \" the movie has the genres of \" + ', '.join(genres)\n","    str_movie_name = 'the movie ' + movie_name + ' is a movie '\n","\n","    if isinstance(actors_names, float) and pd.isna(actors_names):\n","      return str_movie_name+ 'in which ' + summary + str_genres\n","    else:\n","        actors_str = ''\n","        if isinstance(actors_names, list):\n","            valid_actors = [str(name) for name in actors_names if not pd.isna(name)]\n","            actors_str = ' of the actors ' + ', '.join(valid_actors) + ' in which '\n","\n","        return str_movie_name + actors_str.lower() + summary + str_genres\n","expand_summary(df['summary'][0],df['movie_name'][0],df['genres'][0],df['Actor Name'][0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":72},"id":"nHP7wd5HyuLz","executionInfo":{"status":"ok","timestamp":1701611905355,"user_tz":-60,"elapsed":29,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"e45b19cb-b5c7-4047-cc79-84ccec505f80"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"the movie Taxi Blues is a movie  of the actors natalia koliakanova, pyotr mamonov, hal singer, vladimir kashpur, pyotr zaychenko, elena saphonova in which Shlykov, a hard-working taxi driver and Lyosha, a saxophonist, develop a bizarre love-hate relationship, and despite their prejudices, realize they aren't so different after all. the movie has the genres of World cinema, Drama\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["df['expanded_summary'] = df.apply(lambda x: expand_summary(x['summary'],\n","                                                           x['movie_name'],\n","                                                           x['genres'],\n","                                                           x['Actor Name']),axis=1)"],"metadata":{"id":"R6MvdrdLz-QI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df[df['Actor Name'].isna()]['expanded_summary'].values[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"id":"KxxpJmCgGs3D","executionInfo":{"status":"ok","timestamp":1701611906652,"user_tz":-60,"elapsed":24,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"e8ecbef9-9cad-4bf5-91ff-8916cf7f0853"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'the movie Red\\'s Dream is a movie in which Set in a lonely city on a rainy night, the film takes place in a bicycle shop  that is closed for the night. In the corner of the shop sleeps Red, a red unicycle who languishes in the \"clearance corner\", waiting to be purchased. As the camera zooms on him, the sound of rain falling turns into a drumroll, and we go into the dream-sequence. In his dream, Red is being ridden by a circus clown  as part of a juggling act. The clown enters the ring, accompanied by a fanfare, expecting a huge applause, but instead receives only a few scattered claps from different parts of the  audience. Nevertheless, Lumpy starts juggling three balls whilst riding Red, occasionally dropping them as he does. However, Red slides out from underneath Lumpy  and spikes the balls back to him with his bike pedals. The confused clown ponders this for only a second before continuing on with his act. At this point, Red is forced to catch another ball which Lumpy unintentionally throws across the ring. Lumpy continues to ride in the air while juggling the other two balls while Red bounces the green ball up and down. Eventually Lumpy comes to a sudden realization, and looks between his legs, only to discover he\\'s been riding on nothing before he falls to the ground . Red catches the other two balls and begins juggling all three of them, and then balances them on top of each other, after which he receives an uproarous applause. But then the sound of clapping turns into the sound of rain, and Red awakens, left to face bleak reality. Depressed, he returns to the corner where he was previously resting, and goes back to sleep. The short ends with the final image of the neon sign for \"Eben\\'s Bikes\". the movie has the genres of Animation, Family Film, Computer Animation, Short Film'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["def spacy_tokenize(text):\n","  # fonction qui tokenize avec le tokenizer spacy\n","  return [token.text for token in tokenizer(text)]\n","\n","# remove Punctuations from the Reviews\n","def punctuation_removal(messy_str):\n","    clean_list = [char for char in messy_str if char not in string.punctuation]\n","    clean_str = ''.join(clean_list)\n","    return clean_str\n","\n","def remove_accented_chars(text):\n","    new_text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n","    return new_text\n","\n","def remove_special_characters(text):\n","    new_s = re.sub(r\"\"\"[\"?,$!]|'(?!(?<! ')[ts])\"\"\", \"\", text)\n","\n","    # Deal with the final dot\n","    new_s = re.sub(r\"\\.\", \" .\", new_s)\n","\n","    return new_s\n","stop_words = set(stopwords.words('english'))\n","# Tokenize and remove stopwords\n","def remove__stopwords(text):\n","    tokens = spacy_tokenize(text.lower())\n","    filtered_tokens = remove_stopwords(tokens)\n","    return ' '.join(filtered_tokens)\n","\n","df['summary'] = df['expanded_summary'].apply(remove_stopwords)\n","df['summary'] = df['summary'].str.lower()\n","df['summary'] = df['summary'].apply(punctuation_removal)\n","df['summary'] = df.apply(lambda x: remove_accented_chars(x['summary']), axis = 1)\n","df['summary'] = df.apply(lambda x: remove_special_characters(x['summary']), axis = 1)"],"metadata":{"id":"qzTve4Dl644Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.loc[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PAzrqmsTKatF","executionInfo":{"status":"ok","timestamp":1701611916724,"user_tz":-60,"elapsed":79,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"48424a2b-d446-47a0-dc24-f80fa3bdfbea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Wikipedia_movie_ID                                             23890098\n","summary               movie taxi blues movie actors natalia koliakan...\n","relase_date                                                  1990-09-07\n","movie_name                                                   Taxi Blues\n","genres                                            [World cinema, Drama]\n","Actor Name            [Natalia Koliakanova, Pyotr Mamonov, Hal Singe...\n","expanded_summary      the movie Taxi Blues is a movie  of the actors...\n","Name: 0, dtype: object"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["from datasets import Dataset\n","data_dict = Dataset.from_pandas(df)"],"metadata":{"id":"7YOTz0SfPiXA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_dict[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pn-l8aGxPlfA","executionInfo":{"status":"ok","timestamp":1701611917365,"user_tz":-60,"elapsed":44,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"ae206670-3886-45e9-fb30-17a814629cb5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Wikipedia_movie_ID': 23890098,\n"," 'summary': 'movie taxi blues movie actors natalia koliakanova pyotr mamonov hal singer vladimir kashpur pyotr zaychenko elena saphonova shlykov hardworking taxi driver lyosha saxophonist develop bizarre lovehate relationship despite prejudices realize arent different all movie genres world cinema drama',\n"," 'relase_date': '1990-09-07',\n"," 'movie_name': 'Taxi Blues',\n"," 'genres': ['World cinema', 'Drama'],\n"," 'Actor Name': ['Natalia Koliakanova',\n","  'Pyotr Mamonov',\n","  'Hal Singer',\n","  'Vladimir Kashpur',\n","  'Pyotr Zaychenko',\n","  'Elena Saphonova'],\n"," 'expanded_summary': \"the movie Taxi Blues is a movie  of the actors natalia koliakanova, pyotr mamonov, hal singer, vladimir kashpur, pyotr zaychenko, elena saphonova in which Shlykov, a hard-working taxi driver and Lyosha, a saxophonist, develop a bizarre love-hate relationship, and despite their prejudices, realize they aren't so different after all. the movie has the genres of World cinema, Drama\",\n"," '__index_level_0__': 0}"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["data_dict = data_dict.map(lambda x: {\n","    \"id\": f'{x[\"Wikipedia_movie_ID\"]}',\n","    \"text\": x[\"summary\"] ,\n","    \"metadata\": {\n","        # \"release_date\": x[\"relase_date\"],\n","        \"movie_name\": x[\"movie_name\"],\n","        \"genres\": x[\"genres\"],\n","        # \"actors names\": x['Actor Name'],\n","        \"text\": x[\"summary\"],\n","    }\n","    })"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["1ad364070ba24907be04b6baa2d3391f","d7e5f6ef0da4406c93f21d56e2602337","a5f8a320357c452699dc7ebe74db9a53","a686bc0860984f9f9ec59401841f12a9","1d7c7497825144eb84cdb42f71db8844","a61b809e55774c3795dc38834a07e09b","62dee596ebf34027859d93e32d610457","9f4839be60d644818fbdb8b66c644a06","bd58a5b159c445feafdf7bf27905df51","55aefdf4f849436da46dd0873f749d9e","ceefbce987f3431f87fc09bcfd3769a3"]},"id":"uaWH4IvYKX87","executionInfo":{"status":"ok","timestamp":1701611923122,"user_tz":-60,"elapsed":5794,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"03c2a177-05ed-428f-c87d-bcf09ca82444"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Map:   0%|          | 0/42204 [00:00<?, ? examples/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1ad364070ba24907be04b6baa2d3391f"}},"metadata":{}}]},{"cell_type":"code","source":["data = data_dict.remove_columns([\"Wikipedia_movie_ID\",'summary','expanded_summary',\n","                                 'relase_date','movie_name','genres','__index_level_0__',\n","                                 'Actor Name'])"],"metadata":{"id":"Cl9_XvCwUeVH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aCOo7Sh3P4CH","executionInfo":{"status":"ok","timestamp":1701611923125,"user_tz":-60,"elapsed":71,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"d4ae774e-3164-4b64-b929-a36f6fa1a499"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Dataset({\n","    features: ['id', 'text', 'metadata'],\n","    num_rows: 42204\n","})"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["pip install sentence-transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B8FTvpVFLdaC","executionInfo":{"status":"ok","timestamp":1701611927946,"user_tz":-60,"elapsed":4885,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"bb0779d1-d76a-4cd4-a4b3-15542322ff52"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.10/dist-packages (2.2.2)\n","Requirement already satisfied: transformers<5.0.0,>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (4.35.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (4.66.1)\n","Requirement already satisfied: torch>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (2.1.0+cu118)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (0.16.0+cu118)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.23.5)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.11.4)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (3.8.1)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (0.1.99)\n","Requirement already satisfied: huggingface-hub>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (0.19.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence-transformers) (3.13.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence-transformers) (2023.6.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence-transformers) (2.31.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence-transformers) (6.0.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence-transformers) (4.5.0)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.4.0->sentence-transformers) (23.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence-transformers) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence-transformers) (3.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence-transformers) (3.1.2)\n","Requirement already satisfied: triton==2.1.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.6.0->sentence-transformers) (2.1.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence-transformers) (2023.6.3)\n","Requirement already satisfied: tokenizers<0.19,>=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence-transformers) (0.15.0)\n","Requirement already satisfied: safetensors>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.6.0->sentence-transformers) (0.4.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk->sentence-transformers) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk->sentence-transformers) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence-transformers) (3.2.0)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision->sentence-transformers) (9.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.6.0->sentence-transformers) (2.1.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.4.0->sentence-transformers) (2023.11.17)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.6.0->sentence-transformers) (1.3.0)\n"]}]},{"cell_type":"code","source":["from sentence_transformers import SentenceTransformer\n","embed_model = SentenceTransformer('all-MiniLM-L6-v2')"],"metadata":{"id":"ccStpfOqlmrA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### vector database initialization"],"metadata":{"id":"p84mC67KXFH-"}},{"cell_type":"code","source":["import os\n","# import openai\n","import getpass"],"metadata":{"id":"WeaGkpm7ZD-k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pinecone\n","\n","# initialize connection to pinecone (get API key at app.pinecone.io)\n","api_key = os.getenv(\"PINECONE_API_KEY\") or getpass.getpass()\n","# find your environment next to the api key in pinecone console\n","env = \"gcp-starter\" #os.getenv(\"PINECONE_ENVIRONMENT\") or input()\n","\n","pinecone.init(api_key=api_key, environment=env)"],"metadata":{"id":"UmVqEdd_XEkz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import time\n","\n","index_name = \"llama2rag\"\n","\n","# check if index already exists (it shouldn't if this is first time)\n","if index_name not in pinecone.list_indexes():\n","    # if does not exist, create index\n","    pinecone.create_index(\n","        index_name,\n","        dimension=384,  # dimensionality of ada 002\n","        metric='llama2rag'\n","    )\n","    # wait for index to be initialized\n","    while not pinecone.describe_index(index_name).status['ready']:\n","        time.sleep(1)\n","\n","# connect to index\n","index = pinecone.Index(index_name)\n","time.sleep(1)\n","# view index stats\n","index.describe_index_stats()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RJY_igz3XIn_","executionInfo":{"status":"ok","timestamp":1701611929859,"user_tz":-60,"elapsed":1423,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"2910e0f7-bda1-44aa-8f5b-61577ce0396a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'dimension': 384,\n"," 'index_fullness': 0.42204,\n"," 'namespaces': {'': {'vector_count': 42204}},\n"," 'total_vector_count': 42204}"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["pip install openai"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ZDbHFLkOj6d","executionInfo":{"status":"ok","timestamp":1701611935040,"user_tz":-60,"elapsed":5197,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"8f247351-7840-44c5-fc46-bf301637024e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: openai in /usr/local/lib/python3.10/dist-packages (1.3.7)\n","Requirement already satisfied: anyio<4,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from openai) (1.7.0)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from openai) (0.25.2)\n","Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (1.10.13)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai) (1.3.0)\n","Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.1)\n","Requirement already satisfied: typing-extensions<5,>=4.5 in /usr/local/lib/python3.10/dist-packages (from openai) (4.5.0)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.5.0->openai) (3.6)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.5.0->openai) (1.2.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2023.11.17)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (1.0.2)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\n"]}]},{"cell_type":"code","source":["from tqdm.auto import tqdm\n","import openai\n","\n","batch_size = 100  # how many embeddings we create and insert at once\n","\n","for i in tqdm(range(0, len(data), batch_size)):\n","    passed = False\n","    # find end of batch\n","    i_end = min(len(data), i+batch_size)\n","    # create batch\n","    batch = data[i:i_end]\n","    # create embeddings (exponential backoff to avoid RateLimitError)\n","    for j in range(5):  # max 5 retries\n","        try:\n","            res = embed_model.encode(batch[\"text\"])\n","            passed = True\n","        except openai.error.RateLimitError:\n","            time.sleep(2**j)  # wait 2^j seconds before retrying\n","            print(\"Retrying...\")\n","    if not passed:\n","        raise RuntimeError(\"Failed to create embeddings.\")\n","    # get embeddings\n","    embeds = res.tolist()\n","    to_upsert = list(zip(batch[\"id\"], embeds, batch[\"metadata\"]))\n","    # upsert to Pinecone\n","    index.upsert(vectors=to_upsert)"],"metadata":{"id":"TYeGl1hfk4zR","colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["1338c04658d547839c2b31c3116b6ab1","8e0a0f40408d4ce9a9912652997778d3","907f765108e14e0a93921f11a41c1793","8b4b59e4ff044c61b1a9a344e00dcd4d","b1bbff8145ee4b099402278db6123ef9","a61dca60cec44aa49c4037034adeb012","03bcc127ee3845c6be175675b50d3554","09afb22074b94304bbfbeb092a075f38","4f50a03b9ae54ba393875a3b62c1bdd1","881f75ddf27442e8bb772ead0b9b2ae3","aaeea495cb5944f6bca8ade7a6da140e"]},"executionInfo":{"status":"ok","timestamp":1701612665752,"user_tz":-60,"elapsed":730732,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"4fd11a39-535d-411b-c6ea-fb37cd0c48d0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/423 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1338c04658d547839c2b31c3116b6ab1"}},"metadata":{}}]},{"cell_type":"code","source":["def get_docs(query: str, top_k: int):\n","    # encode query\n","    xq = embed([query]).tolist()  # Convert the NumPy array to a list\n","    res = index.query(xq, top_k=top_k, include_metadata=True)\n","    # get doc text\n","    docs = {x[\"metadata\"]['text']: i for i, x in enumerate(res[\"matches\"])}\n","    return docs"],"metadata":{"id":"o0ZzDdu9zm7N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def embed(docs: list[str]) -> list[list[float]]:\n","  embeddings = embed_model.encode(docs)\n","  return embeddings"],"metadata":{"id":"U8wDHt8W-3ZC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["query = \"recommend me a movie similar to Toy Story\"\n","docs = get_docs(query, top_k=10)\n","print(\"\\n---\\n\".join(docs.keys()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F9YNSMgdzrmX","executionInfo":{"status":"ok","timestamp":1701612668861,"user_tz":-60,"elapsed":3122,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"545ff36e-8680-44b9-d20c-d42cc220ff05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["movie the christmas toy movie actors zachary bennett dave goelz steve whitmire kathryn mullen jerry nelson richard hunt camille bonora jim henson when people around toys play playroom but toy frozen forever person catches position careful its christmas eve rugby tiger remembers favorite christmas toy year wants favorite year replaced toy however doesnt stop think jamie unwrapped year shed normal place usually puts hed frozen forever its apple doll rugby supplanted favorite toy tell whats store but rugby wont believe her tries christmas package lets meteora queen asteroids loose unfortunately doesnt know shes toy thinks shes landed aliens and its apple mew  toys rugby box meteora theyre frozen forever movie genres childrens family holiday film childrens fantasy\n","---\n","movie beauty beast movie a little girl eating snacks doesnt realize bedtime then sandman comes and sure enough girl falls asleep blink eye just then dream toyland encounters kinds fairy tale characters they sing welcome song meet friendly toy soldier time marching toyland parade just then open book called beauty beast sing title song pages soon page horrible monstrous beast captive sure enough its allout brawl girl beast even toy airplane cant soothe savage beast when realizes its bad dream gets scared jumps bed covers blanket flap pajamas hangs goes sleep movie genres family film short film fantasy comedy film animation musical\n","---\n","movie like father like santa movie actors megan gallagher harry hamlin william hootkins curtis blanck roy dotrice gary frank stuart pankin gary coleman expand section a ruthless toy tycoon named tyler madison secretly son santa claus travels north pole end attempted coup movie genres fantasy family film\n","---\n","movie the mouse his child movie actors andy devine peter ustinov neville brand sally kellerman cloris leachman the mouse child parts single small windup toy wound means key fathers back after having unboxed discover toy shop befriend toy elephant toy seal the child mouse proposes staying shop form family toys ridicule after falling counter broken thrown trash outside enslaved manny rat runs casino city dump uses broken windup toys slave labor force with aid psychic frog mice escape meet animal characters quest free independent selfwinding toys they rediscover elephant seal somewhat broken down manage form family destroy rat empire movie genres family film japanese movies childrens fantasy fantasy adventure childrens animation family\n","---\n","movie the worst movie ever movie according movie summary film includes things robot aliens angstridden teens cleavagewielding soul takers dark overlords crossdressing retards pregnant 14yearold cougars macho scientists santa claus movie genres action horror drama comedy film science fiction musical\n","---\n","movie haunted house movie you world eyes black cat walks moonlit night later cat enters old spooky house everything looks perfectly normal but wait toys actually move movie genres animation adventure short film\n","---\n","movie lu bun movie lion lu rabbit bun friends characters favourites different other so therere funny dramatic situations happened movie genres animation adventure comedy film short film\n","---\n","movie toys movie actors ll cool j robin williams michael gambon joan cusack robin wright jamie foxx donald oconnor jack warden arthur malet debi mazar julio oscar mechoso art metrano yeardley smith steve park wendy melvoin at zevo toys factory lovely field green owner kenneth zevo dying he expresses assistant owen owens wants control business brother retired military man lt gen leland zevo  leland zevo uncertain brothers wishes instead pointing nephew leslie zevo  worthy successor apprenticed zevo toys entire life kenneth zevo states leslie loves work immature good business owner deal corporate world after kenneth dies leland takes over at factory hears possible leaks corporate espionage leland brings son patrick  soldier expert covert military operations oversee security he soon decides series war toys this dismays leslie zevo toys war toys kenneth like them after confrontation leslie leland halts development war toys he asks leslie space work develop toys states doesnt want leslie good enough lelands continued demands space rigid security topsecret projects dismay childlike leslie innocent childlike sister alsatia  owen factory worker leslie developed crush named gwen tyler  leslie suspicious owen shows children arriving factory ushered restricted area he breaks research area discovers kids playing realistic war video games after setting alarm runs door falls welllike water tank sees drowned toy lelands sea swine  patrick decides father discovers mother die appendicitis disappeared father sent covert mission  after revealing fathers true plans dangerous weaponry form toys patrick leslie alsatia gwen owen launch attack lelands labs shut war projects the increasingly demented general sees greatest war opportunity attempts destroy all first sends weapons disguised innocent looking toys sends tommy tanks whirly burly helicopters an intense battle takes place lelands toys original zevo toys leslie manages win battle patrick angry leland suddenly alsatia attacked sea swine  revealing robot built kenneth playmate leslie mother died while seeing leslies sister leland tries escape malfunctioning sea swine tracks attacks resulting defeat in end leslie new head zevo toys alsatia fixed gwen leslies girlfriend leland hospitalized father  patrick decides missions before patrick departs he cousins gwen visit kenneths grave ensuring peace restored toy factory as end credits roll kenneths grave marker large toy elephant floats lush green pasture movie genres fantasy adventure comedy\n","---\n","movie even dwarfs started small movie actors helmut doring a group dwarfs confined institution remote island rebel guards director display mayhem the dwarfs gleefully break windows dishes abandon running truck drive circles engineer food fights cock fights set pots flowers kill large pig torment blind dwarfs crucify monkey movie genres world cinema drama art film\n","---\n","movie a tale two mice movie actors mel blanc tedd pierce babbit sends catstello cheese refrigerator putting catsello danger peril cat finally catsello obtains block cheese babbit doesnt want it doesnt like swiss cheese fed babbits bossiness catsello force feeds babbit swiss cheese movie genres animation family film short film\n"]}]},{"cell_type":"code","source":["query = \"recommend me a movie similar to Spiderman\"\n","docs = get_docs(query, top_k=1)\n","print(\"\\n---\\n\".join(docs.keys()))"],"metadata":{"id":"p_syZn-q_NMX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701612668862,"user_tz":-60,"elapsed":32,"user":{"displayName":"Amr Mohamed","userId":"04775414902323080406"}},"outputId":"be7ce822-14d2-4a51-c943-ef5aac88f26f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["movie the amazing spiderman movie actors jeff donnell thayer david hilly hicks nicholas hammond david white len lesser michael pataki lisa eilbacher peter parker freelance photographer daily bugle bitten radioactive spider discovers gained superpowers superstrength agility ability climb sheer walls ceilings when mysterious guru places people mindcontrol rob banks threatens 10 new yorkers commit suicide command city pays 50 million peter costumed hero spiderman stop crooks fiendish schemecite web movie genres family film action superhero movie fantasy drama crime fiction science fiction\n"]}]}]}